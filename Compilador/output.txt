#include <iostream> 
#include <ap_int.h> 
 
typedef ap_uint<8> fixed_int; 
typedef ap_uint<17> fixed_aux_salida; 
typedef ap_uint<9> fixed_out; 
using namespace std; 
 
const fixed_int functionentrada01 = 256/(2 - 1); 
const fixed_int functionentrada02 = 256/(3 - 2); 
const fixed_int functionentrada11 = 256/(2 - 1); 
const fixed_int functionentrada12 = 256/(3 - 2); 

fixed_int entradaFuzz[2] = {0, 0}; 
fixed_int salidaMembershipValues[1] = {0}; 

 
void fuzzifier (fixed_int entrada) { 
 
 //entrada------------------------------------

	if (entrada < 1 || entrada > 3) 
		entradaFuzz[0] = 0;
	else 
		if (entrada > 2) 
			entradaFuzz[0] = functionentrada01 * (entrada-1); 
		else 
			entradaFuzz[0] = functionentrada02 * (3 - entrada);


	if (entrada < 1 || entrada > 3) 
		entradaFuzz[1] = 0;
	else 
		if (entrada > 2) 
			entradaFuzz[1] = functionentrada11 * (entrada-1); 
		else 
			entradaFuzz[1] = functionentrada12 * (3 - entrada);


} 
 
void rulesEvaluation(){ 

	fixed_int aux = 0; 
	membershipValuessalida[0] = min(entradaFuzz[0],); 

	aux = min(entradaFuzz[1]); 
	if (membershipValuessalida[0] < aux 
		 membershipValuessalida[0] = aux; 

} 
const fixed_int outputValuessalida[1] = {1}; 

fixed_int defuzzifiersalida(){ 

	fixed_aux_salida numerator = 0; 
 	fixed_aux_salida denominator = 0; 
 	for(int i=0; i<1; i++){ 
		numerator = numerator + salidaMembershipValues[i] * outputValuessalida[i]; 
		denominator = denominator + salidaMembershipValues[i]; 
	} 
	return numerator/denominator; 
}

fixed_out fuzzyController(fixed_int entrada){ 

	fuzzifier(entrada);
	rulesEvaluation(); 

	fixed_out output = defuzzifiersalida(); 
	return output;
}
