pendulo_invertido <8>:
	BEGIN
		DECLARE {
			angulo : IN;
			velocidad : IN;
			fuerza : OUT;
		}
		
		FUZZ {
			angulo {
			  nl = Z_SHAPE(54, 78);
			  nm = TRIANGULAR(0, 99, 113);
			  ns = TRIANGULAR(103, 117, 127);
			  z = TRIANGULAR(120, 127, 132);
			  ps = TRIANGULAR(127, 138, 152);
			  pm = TRIANGULAR(142, 156, 255);
			  pl = S_SHAPE(166, 177);
			};
			velocidad {
			  nl = Z_SHAPE(25, 64);
			  nm = TRIANGULAR(0, 64, 106);
			  ns = TRIANGULAR(64, 106, 127);
			  z = TRIANGULAR(106, 127, 149);
			  ps = TRIANGULAR(127, 149, 191);
			  pm = TRIANGULAR(149, 191, 255);
			  pl = S_SHAPE(191, 229);
			};
			fuerza {
				nl = SINGLETON(0);
				nm = SINGLETON(51);
				ns = SINGLETON(106);
				z = SINGLETON(127);
				ps = SINGLETON(149);
				pm = SINGLETON(204);
				pl = SINGLETON(255);
			};
		}
		RULES <MINMAX> { (angulo * velocidad = fuerza)
			nl * nl = pl;
			nm * nl = pl;
			ns * nl = pm;
			z * nl = pm;
			ps * nl = ps;
			pm * nl = ps;
			pl * nl = z;
			
			nl * nm = pl;
			nm * nm = pm;
			ns * nm = pm;
			z * nm = ps;
			ps * nm = ps;
			pm * nm = z;
			pl * nm = ns;
			
			nl * ns = pm;
			nm * ns = pm;
			ns * ns = ps;
			z * ns = ps;
			ps * ns = z;
			pm * ns = ns;
			pl * ns = ns;
			
			nl * z = pm;
			nm * z = ps;
			ns * z = ps;
			z * z = z;
			ps * z = ns;
			pm * z = ns;
			pl * z = nm;
			
			nl * ps = ps;
			nm * ps = ps;
			ns * ps = z;
			z * ps = ns;
			ps * ps = ns;
			pm * ps = nm;
			pl * ps = nm;
			
			nl * pm = ps;
			nm * pm = z;
			ns * pm = ns;
			z * pm = ns;
			ps * pm = nm;
			pm * pm = nm;
			pl * pm = nl;
			
			nl * pl = z;
			nm * pl = ns;
			ns * pl = ns;
			z * pl = nm;
			ps * pl = nm;
			pm * pl = nl;
			pl * pl = nl;

		}
		DEFUZZ{
			fuerza = CENTROID;
		}
	END;